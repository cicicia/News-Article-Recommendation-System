# -*- coding: utf-8 -*-
"""Recommendation System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hprys_n617DM1nJ7XZli26Shnmv40Xyw
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import nltk
import re
import string
import json
nltk.download('stopwords')
from nltk.corpus import stopwords

"""### **LOAD DATASET**"""

# Load dataset
data_path = "/content/News_Category_Dataset_v3.json"  # Make sure you upload this to Colab

# Load and preprocess
articles = []
with open(data_path, 'r') as f:
    for line in f:
        try:
            articles.append(json.loads(line))
        except json.JSONDecodeError as e:
            print(f"Skipping line due to JSONDecodeError: {e}")
            # Optionally print the problematic line to inspect it:
            # print(f"Problematic line: {line}")
            continue # Skip the problematic line and continue with the next

df = pd.DataFrame(articles)
df = df[['headline', 'short_description', 'category']]
df.dropna(inplace=True)
df['text'] = df['headline'] + " " + df['short_description']

# Text preprocessing
def clean_text(text):
    text = text.lower()
    text = re.sub(f"[{string.punctuation}]", "", text)
    tokens = text.split()
    tokens = [t for t in tokens if t not in stopwords.words('english')]
    return " ".join(tokens)

# Ambil sampel 10.000 data untuk efisiensi komputasi
df = df.sample(n=10000, random_state=42).reset_index(drop=True)

df['clean_text'] = df['text'].apply(clean_text)

"""### Menggunakan TF-IDF"""

# Vectorize using TF-IDF
vectorizer = TfidfVectorizer(max_features=5000)
tfidf_matrix = vectorizer.fit_transform(df['clean_text'])

# Compute cosine similarity
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Function to get top-N similar articles
def recommend_articles(idx, cosine_sim=cosine_sim, df=df, top_n=5):
    # Ambil skor similarity untuk artikel ke-idx
    sim_scores = list(enumerate(cosine_sim[idx]))
    # Urutkan berdasarkan skor tertinggi (kecuali dirinya sendiri)
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:top_n+1]  # Skip index 0 (artikel itu sendiri)

    print(f"\n=== Artikel Asli (Index {idx}) ===")
    print(f"Kategori  : {df.iloc[idx]['category']}")
    print(f"Judul     : {df.iloc[idx]['headline']}")
    print(f"Deskripsi : {df.iloc[idx]['short_description']}")

    print(f"\n=== {top_n} Artikel Mirip ===")
    for i, (rec_idx, score) in enumerate(sim_scores):
        print(f"\n[{i+1}] Skor Similarity: {score:.4f}")
        print(f"Kategori  : {df.iloc[rec_idx]['category']}")
        print(f"Judul     : {df.iloc[rec_idx]['headline']}")
        print(f"Deskripsi : {df.iloc[rec_idx]['short_description']}")

recommend_articles(10, top_n=5)

"""### Menggunakan BERT"""

!pip install -U sentence-transformers

from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

# Load pre-trained BERT model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Generate dense embeddings
embeddings = model.encode(df['text'].tolist(), show_progress_bar=True)

# Cosine similarity
cosine_sim = cosine_similarity(embeddings, embeddings)

# Function to get top-N similar articles
def recommend_articles(idx, cosine_sim=cosine_sim, df=df, top_n=5):
    # Ambil skor similarity untuk artikel ke-idx
    sim_scores = list(enumerate(cosine_sim[idx]))
    # Urutkan berdasarkan skor tertinggi (kecuali dirinya sendiri)
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:top_n+1]  # Skip index 0 (artikel itu sendiri)

    print(f"\n=== Artikel Asli (Index {idx}) ===")
    print(f"Kategori  : {df.iloc[idx]['category']}")
    print(f"Judul     : {df.iloc[idx]['headline']}")
    print(f"Deskripsi : {df.iloc[idx]['short_description']}")

    print(f"\n=== {top_n} Artikel Mirip ===")
    for i, (rec_idx, score) in enumerate(sim_scores):
        print(f"\n[{i+1}] Skor Similarity: {score:.4f}")
        print(f"Kategori  : {df.iloc[rec_idx]['category']}")
        print(f"Judul     : {df.iloc[rec_idx]['headline']}")
        print(f"Deskripsi : {df.iloc[rec_idx]['short_description']}")

recommend_articles(42, top_n=5)

